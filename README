esceval
=======

Escape (quote) things so that they evaluate back to the same value in all
Bourne-like shells (`sh`, `bash`, `dash`, `zsh`, `ksh`, `ash`, POSIX, ...).


Summary
-------

`esceval` (short for "Escape Eval") adds one layer of Bourne/POSIX shell
escaping around every argument passed to it (each argument is escaped
individually, to preserve the boundaries between arguments).

It's also a strict specification for *how* to escape/quote scrings for
maximum safety and portability across *all* Bourne-like shells.

This makes it possible to do certain things within the shell that are
otherwise harder or impossible to do in robust, portable, and clean ways.

This is nothing new or groundbreaking: if you've spent enough time in a
Bourne-family shell you'll have doubtlessly rolled your own take on this
same thing, and modern shells have the `%q` flag for `printf` which does
almost the same thing in a less portable way.

--- esceval Description/"Spec" ---

My implementations of esceval behave as follows:

For each argument it's invoked with:
1. Print a single quote.
2. For each character of the argument:
 If the character is a single quote:
  Then: print a single quote, a backslash, and two more single quotes.
  Else: print the character verbatim.
3. Print a single quote.
4. If it's the last argument:
 Then: print a newline.
 Else: print a space.

--- Rationale ---
 
Points 1-3 are the simplest way to escape an arbitrary string that I know of.

However, I recognize there may be arguments for doing more complex parsing in
order to produce "neater" output in some cases (e.g. if the argument is: ''',
my way would produce ''\'''\'''\''' even though "'''" or \'\'\' are both also
valid escapings of three single quotes); perhaps the performance overhead of
such parsing would be smaller than the work a shell does to parse so many
redundant double quotes. Therefore if, hypothetically, it were up to me to
write an "official" esceval spec, an implementation would be conformant so long
as the functional result of its escaping was the same. (However, I would
implore any such alternative implementations to at least consider taking into
account older and obscure Bourne shells still in use, for example those which
still use '^' as if it had the same special meaning as the '|' character, when
evaluating if their escaping approach is functionally equivalent to this one.)

Point 4 ensures that the escaped arguments are separated by whitespace from
each other, and the final newline means the result will be more legible to
anyone seeing the output (POSIX/Bourne shells strip ALL trailing newlines from
command substitution output before substituting it, so that newline will
'disappear' in typical shell script usage). In practice, simply printing a
newline between every argument would work too, but I thought the output was
more intuitive that way.

--- The (not really that impressive) stuff ---

Currently provided are two implementations of esceval:
1. c/esceval.c
   A tiny and basic C (no really) program. (If you can compile the archetypical
   C "Hello World!" program, you should have no trouble compiling this.)
2. sh/esceval.sh
   This is a polyfill - you can include this in your shell scripts, and if the
   command "type esceval" returns a failure, it defines an esceval() function.
   The shell script esceval() function should work using just about any Bourne
   and/or POSIX shell in existence today - however, if your shell does not
   support "${var%%word}" and "${var#word}" syntax, it will fall back on a sed
   based implementation. Realistically, this is VERY inefficient vs the C
   version, but the polyfil seems like a great piece of shell script code to
   just paste/source in your projects (or your .profile or similar file), and
   in some cases it could be preferable to compiling a new binary.
   I know of no Bourne/POSIX shell realistically in use today that this
   esceval.sh polyfill would not work in, but please tell me if you find one.

IFS:
Currently esceval does not take any care to check the value of the IFS
environment variable. My current opinion is that this should be acceptable
because setting the IFS to something non-default is a very special case and
if absolutely needed, it could be set to default temporarily when evaluating
esceval output, then reset it to your non-default value again when done. But
I am happy to consider arguments that it should instead give IFS special
consideration, for example by printing the value of IFS between arguments
rather than a space.

ENCODINGS:
Currently esceval.c, which is my "primary"/"reference" implementation of
esceval, does not in any way concern itself with wide character encodings
which may have the value of the ASCII ' as a valid byte within another
character. My current opinion is that the only encodings to care about in a
general purpose tool are UTF-8, and by logical extension, its subset ASCII. As
I understand it, esceval.c will handle both of those just fine. I am not
sure how much of a problem this may pose for Bourne/POSIX shell users on
Windows systems (e.g. those using shells from Git Bash, cygwin, mingw,
busybox-w32, etc.) so again I am willing to consider arguments and suggestions
on this front.
